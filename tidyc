#!/bin/bash

# Other interesting indent args;
#   -sob - swallow extra blank lines.
#   -nhnl - reformat wrapped lines.
#   -bfda - function definition args one per line.
#   -ncs - no space after cast.
#   -ppi2 - 2 space preprocessor indentation.
#   -linux -nut -i4 - linux without tabs.
#   -fc1 don't make column1 comments immutable.
#   -fca reformat all non-block comments.
INDENT_ARGS='-linux -nut -i4 -ppi2 -l120 -lc80 -fc1'
#INDENT_ARGS='-linux -nut -i4 -ppi2 -l120 -lc80 -bfda'
#INDENT_ARGS='-kr -nut -l120 -lc80'

# Unfortunately indent requires -T arguments for every used-defined
# type to correctly apply formatting of spaces around types. We cannot
# know in advance what all the user-defined types are, and indent
# doesn't support using regexes with -T. So instead we use sed with a
# regex to make these minor adjustments after indent has run, using the
# following regex to match user-defined types. This is the default, and
# additional regexes can be added using "-T /regex/" arguments.
TYPE_RE='(\w+_t)'
SC_OPT=0
FCD_OPT=0
DSC_OPT=1
DQT_OPT=0
DAB_OPT=1
IEC_OPT=1
while [ "${1:0:1}" == "-" ]; do
  case "$1" in
    # Stop parsing cmdline args at --.
    --) shift; break ;;
    # Force particular styles, dropping suggested defaults.
    -L|-linux) INDENT_ARGS="-linux" ;;
    -K|-kr) INDENT_ARGS="-kr" ;;
    -G|-gnu) INDENT_ARGS="-gnu" ;;
    -B|-orig) INDENT_ARGS="-orig" SC_OPT=1 ;;
    # Reformat existing blank lines and linebreaks.
    -R) INDENT_ARGS="${INDENT_ARGS} -sob -nhnl" ;;
    # Reformat all comments, including docbook comments.
    -C) INDENT_ARGS="${INDENT_ARGS} -fc1 -fca" FCD_OPT=1;;
    # Enable/disable star comments.
    -sc|--star-comments) SC_OPT=1 ;;
    -nsc|--dont-star-comments) SC_OPT=0 ;;
    # Enable/disable Doxygen comment reformatting.
    -fcd|--format-doxygen-comments) FCD_OPT=1 ;;
    -nfcd|--dont-format-doxygen-comments) FCD_OPT=0 ;;
    # Enable/disable star comments for Doxygen.
    -dsc|--star-doxygen-comments) DSC_OPT=1 ;;
    -ndsc|--dont-star-doxygen-comments) DSC_OPT=0 ;;
    # Select Doxygen JavaDoc or Qt style.
    -dqt|--doxygen-use-qt) DQT_OPT=1 ;;
    -ndqt|--doxygen-use-javadoc) DQT_OPT=0 ;;
    # Enable/Disable Doxygen autobrief support.
    -dab|--doxygen-autobrief) DAB_OPT=1 ;;
    -ndab|--no-doxygen-autobrief) DAB_OPT=0 ;;
    # Enable/Disable ignore extern "C" statements for indenting.
    -iec|--ignore-extern-c) IEC_OPT=1 ;;
    -niec|--dont-ignore-extern-c) IEC_OPT=0 ;;
    # Add userdefined types with support for regexes.
    -T) if [[ "$2" =~ /.*/ ]]; then
          TYPE_RE="${TYPE_RE}|(${2:1:-1})";
	else
	  INDENT_ARGS="${INDENT_ARGS} $1 $2";
	fi;
	shift ;;
    # Append any other indent formating args.
    *) INDENT_ARGS="${INDENT_ARGS} $1" ;;
  esac
  shift
done
# Add -sc to INDENT_ARGS if any type of comment needs it;
if [[ $SC_OPT == 1 || $DSC_OPT == 1 ]]; then
  INDENT_ARGS="${INDENT_ARGS} -sc" ;
else
   INDENT_ARGS="${INDENT_ARGS} -nsc" ;
fi

# Make sure TYPE_RE is bracketed and make a CAST_RE with it.
TYPE_RE="(${TYPE_RE})"
CAST_RE="(\\(${TYPE_RE}( \\*+)?\\))"
# Comment contents, anything that doesn't include '*/'.
CMT_MID='(([^*]|[*]+[^*/])*)'
# Comment start line for formatable comments.
CMT_BEG='^(.*)/\*([^*=-_]'"${CMT_MID}"')?$'
# Comment start line for formatable non-docbook comments.
NDB_BEG='^(.*)/\*([^*=-_!]'"${CMT_MID}"')?$'
# Comment start line for formatable docbook comments.
FDB_BEG='^(.*)/\*!'"${CMT_MID}"'?$'
# Comment contents starred lines.
CMT_STR='^(\s*)\*( .*)?$'
# Comment end line.
CMT_END='^(.*)\*/(.*)$'
# The sed commands to load the whole file into the pattern space.
SED_LOAD='
  1 {h; d;};
  $! {H; d;};
  $ {H; x;};'
# Doxygen C structure commands.
DOX_STR='[\\@](struct|union|enum|fn|var|def|typedef|file) [^\n]*\n'

# Convert Doxygen comments to '/*!' or '/**' depending on FCD_OPT to
# enable/disable formatting. We always format Doxygen '/**<' member
# comments so they indent correctly.
if [ $FCD_OPT == 1 ]; then
  SED_PRE1='s:/\*\*([ <]|$):/*!\1:;'
else
  SED_PRE1='s:/\*!( |$):/**\1:; s:/\*\*<:/*!<:;'
fi

# Wrap Doxygen \code...\endcode blocks in immutable /*=...=*/ comments.
if [ $FCD_OPT == 1 ]; then
  SED_PRE1="${SED_PRE1}
  \\:${FDB_BEG}:,\\:${CMT_END}: {"'
    s:\\code:\\code */\n/*=\\code:;
    s:^(((\s*) [ *] )?.*)\\endcode:\1\\endcode=*/\n\3/*! \\endcode:;
  };'
fi

# For -iec remove brackets of extern "C" {...} wrappers.
# Note this sucks the whole file into the pattern space.
if [ $IEC_OPT == 1 ]; then
  SED_PRE1="${SED_PRE1} ${SED_LOAD} "'
  s:\n(extern "C") \{(.*\n)\}:\n\1;\2;:;'
fi

# Strip leading '*'s from comments and suck in comment delimiters on
# blank lines. They will be re-added by indent if using -sc or -cdb.
# Note this sucks the whole comment into the pattern space.
SED_PRE2="
\\:${CMT_BEG}:,\\:${CMT_END}: {
  s:${CMT_STR}:\\1 \\2:;
  \\:${CMT_BEG}: {h; d;};
  \\:${CMT_END}:! {H; d;};
  \\:${CMT_END}: {H; x;};"'
  s:(/\*!?)\s+:\1 :;
  s:\s+\*/: */:;
};'

# If formatting doxygen comments, tidy commands.
if [ $FCD_OPT == 1 ]; then
  # Put structural commands in their own paragraph.
  SED_PRE2="${SED_PRE2} "'s:(/\*! '"${DOX_STR}"'):\1\n:;'
  # Add/Remove Doxygen \brief tags depending on FCD_OPT, DAB_OPT and DQT_OPT.
  if [ $DAB_OPT == 1 ]; then
    SED_PRE2="${SED_PRE2}"'
    s:/\*! ('"${DOX_STR}"'\s*)?[\\@]brief :/*! \1:;'
  elif [ $DQT_OPT == 1 ]; then
    SED_PRE2="${SED_PRE2}"'
    s:/\*! ('"${DOX_STR}"'\s*)?([^\\@ \t\n]):/*! \1\\brief \3:;'
  else
    SED_PRE2="${SED_PRE2}"'
    s:/\*! ('"${DOX_STR}"'\s*)?([^\\@ \t\n]):/*! \1@brief \3:;'
  fi
fi

# If reformating comments, turn para's into single lines and suck in
# multiple spaces to make indent repeatable. This relies on the whole
# comment being in the pattern space.
if [[ "${INDENT_ARGS}" =~ -fca && "${INDENT_ARGS}" =~ -fc1 ]]; then
  SED_PRE2="${SED_PRE2}"'
  \:/\*[^*=-_].*\*/: {
    s:\s*\n\s*\n\s*:*/*/*/:g;
    s:(\S)\s\s+:\1 :g;
    s:\*/\*/\*/:\n\n:g;
  };'
fi

# Repair Doxygen '/*!' comments.
SED_POST1="${SED_POST1}"'
\:/\*$: {
  N;
  s:/\*(\n\s+[* ] )! :/*!\1:;
};
s:/\* !([ <]):/*!\1:;
'

# Remove space between * or & and identifier after userdefined types.
# There is no indent argument for this, it always does it for known types.
# int f(my_t * o); -> int f(my_t *o);
SED_POST2="s:((${TYPE_RE}|${CAST_RE}) (&|\\*+)) :\\1:g;"

# Remove space after type cast using userdefined types.
# This manually implements -ncs for userdefined types.
# a = f((my_t) o); -> a = f((my_t)o);
if [[ "${INDENT_ARGS}" =~ -linux|-ncs && "${INDENT_ARGS}" != *-cs* ]]; then
  SED_POST2="${SED_POST2} s:(${CAST_RE}) :\\1:g;"
fi

# For -nsc, strip leading '*'s from formated non-docbook comments.
if [[ $SC_OPT == 0 && $DSC_OPT == 1 ]]; then
  SED_POST2="${SED_POST2} \\:${NDB_BEG}:,\\:${CMT_END}: {
    s:${CMT_STR}:\\1 \\2:;
  };"
fi

# For -ndsc, strip leading '*'s from formated docbook comments.
if [[ $SC_OPT == 1 && $DSC_OPT == 0 ]]; then
  SED_POST2="${SED_POST2} \\:${FDB_BEG}:,\\:${CMT_END}: {
    s:${CMT_STR}:\\1 \\2:;
  };"
fi

# Trim trailing whitespace added by -sc or left by stripping stars.
SED_POST2="${SED_POST2}"'s:\s+$::;'

# Suck the whole file into the pattern space.
SED_POST2="${SED_POST2} ${SED_LOAD}"

# If formatting doxygen comments, tidy commands.
if [ $FCD_OPT == 1 ]; then
  # Suck in blank line after doxygen structural commands.
  SED_POST2="${SED_POST2}"'
  s:(/\*!\s*\*?\s*'"${DOX_STR}"')\s*\*?\n:\1:g;'
  # Remove immutable /*=...=*/ comment wrappers around \code..\endcode blocks.
  SED_POST2="${SED_POST2}"'
  s:\\code\s*\*/\n/\*=\\code:\\code:g;
  s:\\endcode=\*/\n\s*/\*!(\s*[ *])? \\endcode:\\endcode:g;'
fi

# For -iec restore brackets of extern "C" {...} wrappers.
if [ $IEC_OPT == 1 ]; then
  SED_POST2="${SED_POST2}"'
  s:\n(extern "C");(.*\n);:\n\1 {\2}:;'
fi

# Convert Doxygen comments to JavaDoc or Qt style depending on DJD_OPT.
if [ $DQT_OPT == 1 ]; then
  SED_POST2="${SED_POST2}"'s:/\*\*:/*!:g'
else
  SED_POST2="${SED_POST2}"'s:/\*\!:/**:g;'
fi

# Turn on pipe failure support.
set -o pipefail

# Tidy code from stdin to stdout.
do_tidyc () {
  # Preprocess code with sed.
  sed -r "${SED_PRE1}" |
  sed -r "${SED_PRE2}" |
  # Tidy code using indent.
  indent ${INDENT_ARGS} |
  # Postprocess code with sed.
  sed -r "${SED_POST1}" |
  sed -r "${SED_POST2}"
}

# Tidy stdin or cmdline files.
if [ "$1" == "" ]; then
  do_tidyc
else
  for f in "$@"; do
    o=$(mktemp "$f".XXXX) &&
    {
      do_tidyc < "$f" > "$o" &&
      mv -f "$f" "$f~" &&
      mv -f "$o" "$f" ||
      rm "$o"
    }
  done
fi
